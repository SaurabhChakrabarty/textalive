for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.


A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.












A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.



for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.



A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.

3.	getFeatures – This fuck API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of features of detected faces in each image or an empty response if there is no face detected.

3.	Input Processor Bolt

The Input Processor is used for nigga processing the input data. This class converts input data to required format to be passed on to the next component.

1	Introduction

NTI is involved in developing a component which when bundled into a usecase along with existing NeoEVA components like Face Detection, Face Matching, Biometric Manager and Alerts Manager, can be used to process still image input.

for the unique ID and maps it to the frameId from request and sends back the response.

Still image support included development of Image Sensor component to process Still images for feature extraction and matching. The Usecase Image watchlist combines Image Sensor Component with other existing components of Nec Eva to provide end to end results. Please refer the Requirement Specification document (NecEva_Still_image_Support_Specification_V0.5.docx) for the interface details and purpose of the component. This document specifies the high level design of the Image Sensor Component in NecEva.
1.1	Scope
This document covers important classes used to model the functionality of Image Sensor. 
1.2	Out of Scope
This document does not contain details of algorithms used to implement the functionality. Such information would be covered in the Detailed Design Document.
1.3	Intended Audience
The intended audience of this document is:
for the unique ID and maps it to the frameId from request and sends back the response.

1.	Low Level Designers of Image Sensor Component and Usecase Image Watchlist.
2.	Unit Testers/Functional Testers of Image Sensor Component and Usecase Image Watchlist.
1.4	Abbreviation 
Abbreviation	Description
API	Application Programmable Interface
NEC EVA	A high performance, highly scalable face recognition software application, providing the most accurate and fastest results for the most demanding real-time or post-event face recognition and streaming analytics
Topology	Topology is a data analysis process flow defined by specifying components and Connection between components
Spout	Spout is a component that inputs stream data
Bolt	Bolt is a component that receives data from Spouts or other Bolts and processes data
Connectors	Connection is a route of data transfer between components
ShuffleConnection
	A Connection that switches data destinations in a round-robin manner when transferring data
ZMQTuplePublisherBolt	Bolt class to send input data using ZeroMQ
ZMQTupleReceiverSpout	Spout class to output the received data from ZeroMQ SUB socket

1.5	Conventions
Covered in section 1.4.








for the unique ID and maps it to the frameId from request and sends back the response.





for the unique ID and maps it to the frameId from request and sends back the response.

2	System Environment
2.1	Hardware and Software Platforms
2.1.1	Hardware
Existing Hardware Platform of NecEva would be supported/used in the development.
2.1.2	Software
Existing Software Platform for NecEva would be used.
Item	Value	Description/Version
OS	Linux - 64 bit	Ubuntu 16.04
Libraries	Boost	Boost Library for C++.
Google Chrome Browser		Any Latest Version
Table 2: Development Platform
2.2	System Input and Output
The input for the instance of the component is the configuration parameters for Image-sensor.
The input and output for the APIs are as per the request response parameters explained in the specification document.









3.	Architecture
The Still Image Support project has the following major components:
1.	Image Sensor 
2.	Usecase Image Watchlist
3.1	Image Sensor
The Image Sensor component implements 3 APIs as described below in the technical overview using NecEva’s rest server. The APIs takes in Request and is bundled with other components as a usecase to get feature and alert output in the response.
3.2	Usecase Image Watchlist
The usecase image watchlist usecase bundles the image-sensor component with other NecEva components Face Detection, Face Matching, Biometrics Manager and Alerts Manager to process still image for feature extraction and Face matching.
Configuration Details:

 


 




 

3.3	Architecture diagram 

 
Figure 1: Usecase Image watchlist bundling


The Topology for Image Sensor will be as in the figure below. 

 
Figure 2 : Image Sensor Topology

3.4	Technical Overview
The architecture of Image Sensor is as per NecEva Topology. The Usecase Image watchlist is a bundle of Image Sensor component and other existing NecEva components following the NecEva bundling procedure.
Image Sensor Topology has the below components:
1.	RestApiSpout
The RestApiSpout is used to start the RestServerImpl on the configured port.
2.	RestServerImpl
The RestServerImpl inherits the Rest Server class available with NeoEva SDK. When a request is received a unique ID is generated for each request and is mapped against the frameId from the request. This unique ID is only sent as frameId to the next component. The input frame is then sent to the InputProcessor bolt. Once the detection output is received the thread waits for a minimum time for the matching results from alerts manager (50ms or 100ms for 5 features which is configurable) and then reads the tuple for the unique ID and maps it to the frameId from request and sends back the response.
A Connection is established between the Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.
The RestServerImpl has 3 APIs as detailed below:
1.	matchImage – This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.
2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
3.	getFeatures – This API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of features of detected faces in each image or an empty response if there is no face detected.

3.	Input Processor
The Input Processor is used for processing the input data. This class converts input data to required format to be passed on to the next component.
a. sendImage Function
	This function uses face detector to detect faces from the input image and sends the results in the above Tuple format to the Controller class using Connection between them.
b. sendFeature Function
	This function converts the input feature data in the above output format and sends it to the Controller class using Connection between them.
4.	Controller
The Controller class receives the feature results and alert results and updates the internal monitoring vector list with the results. If the feature result is to be sent for matching it connects with the Publisher and emits the data to the Face matching component.

5.	Publisher
The Publisher publishes the data to feature publish ZMQ. This is the input to the Face Matching Component.

6.	Receiver
The ZMQTupleReceiverSpout listens on the Alert Manager Output queue and send the alert data to the Controller via Connection for alerts processing.
3.5	Deployment Model
The following table lists the components of Usecase Image Watchlist. 
Component	Description
Image Sensor	Component with API for extracting Face Feature and Match results for image/frame and features
Face Matching	Component for face matching of feature with the watchlist from biometrics manager
Biometrics Manager	Component for enrolling watchlists and users 
Alerts Manager	Component to publish alert results to zmq and Alerts db

3.6	Data sizing and Performance
No specific requirements to be handled in the design.








3.7	Interfaces
This section describes the interfaces of Image Sensor and between Components in Usecase Image Watchlist
3.7.1	External Interfaces
3.7.1.1	Image Sensor
Interface Name	Brief Description	Arguments	Description	Return Value	Description
matchImage	send array of pictures to the center for matching with the Watchlist DB and get the response
	Array of Json containing below data
frameId
timestamp
image	Unique frameId, timestamp and base64 string of image to be macthed	Array of JSON with alert information for each matched Face in an Image	-
matchFeature	send array of features to the center for matching with the Watchlist DB and get the response
	Array of Json containing below data
frameId
timestamp
feature	Unique frameId, timestamp and base64 string of feature to be macthed	Array of JSON with alert information for each matched Face in an Image	-
getFeature	send array of pictures to the center for face detection
	Array of Json containing below data
frameId
timestamp
image	Unique frameId, timestamp and base64 string of image to get feature data	Array of JSON with face feature information for each Face in an Image	-
3.7.2	Internal Interfaces
None
4		Design Description
This section describes major classes that will be created for image sensor.
4.1	Static Model
4.1.1	Controller
 
S.No.	Operations	Description
1	Controller	Class Constructor
2	Setup	Bolt setup method
3	Execute	Segregates feature and alert inputs and send to respective functions
4	processDetection	Process the feature inputs and send to matcher if it is from sendImage and sendFeature requests
5	processMatch	Process the alert inputs received from Alerts manager’s ZMQ
6	Initialize	Initializes unique id and frames
7	getUniqueId	Generates a unique id for each request
8	getFrameDetails	Wrapper function to get frames details from Tuple
9	appendFrameDetails	Wrapper function to append frame details to Tuple
10	getStatusDetails	Wrapper function to get status details from Tuple
11	appendStatusDetails	Wrapper function to append status details to Tuple

4.1.2	InputProcessorBolt
 
S.No.	Operations	Description
1	InputProcessorBolt	Gets the min & max eye distance parameters from neoface configuration
2	execute	Segregates calls between sendImage/getFeatures and sendFeature
3	setup	Initializes face detector with neoface configuration data
4	sendImage	The sendImage function makes a call to the face detector’s detect function to detect the faces and sends the results as a Tuple in the format expected by Face matching component to Controller class for further processing
5	sendFeature	The sendFeature function sends the input as a Tuple in the format expected by Face matching component to Controller class for further processing

4.1.3	RestApiSpout
 
S.No.	Operations	Description
1	RestApiSpout	Constructor
2	execute	Initializes and starts a secure HTTPS server
3	setup	Spout setup method






4.1.4	RestServerImpl
 
S.No.	Operations	Description
1	RestServerImpl	Constructor
2	handleRequest	HTTPS request handler
3	init	Sets static file paths and invokes initializer
4	authenticate	Authenticates clients based on username and password
5	matchImage	This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty array again each image if there is no match.
6	getFeatures	This API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of information on face features in each image or an empty array again each image if there is no face feature.
7	matchFeature	This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.

4.1.5	SensorImageTopology
 
S.No.	Operations	Description
1	setup	Prepares the neoface configuration and sets-up the image sensor topology by add Bolts, Spouts and Connections






4.2	Process Model
The following diagram shows the flow used in the APIs:
4.2.1	MatchImage
 








4.2.2	GetFeature

 









4.2.3	MatchFeature

 










4.3	Synchronization / threading model
Threading and synchronization model of NecEVA will be used.
4.4	 fuck Exception & Signal Handling
Exceptions are handled using the defined classes in NecEva cpputils Exception.
4.5	Logging & debugging mechanism
Logging is done using NecEva cpputils component Logger class.
Location: /opt/pulse/<node>/logs/ pulse-instance-<instanceId>/<yyyymmdd>.log
 
4.6	Design for Software System Attributes/ Quality Attributes
4.6.1	Scalability and Maintainability
Image sensor module takes the help of object oriented design principles to make the design maintainable. Adding a new feature requires an API to be added to RestServerImpl source.
  All unexpected conditions and failures will be reported via the exception handling mechanism already present in cpputils provided by NeoEVA platform.
4.6.2	Portability
No portability requirements.
4.6.3	Usability
Existing NecEVA design principles have been followed so there is no impact on usability.
4.6.4	Design for Performance Requirements
The system is required to process five frames per second.
4.6.5	List of Time Critical and Periodic Functions
None




 fuck 


5	Design Considerations
5.1	Design Constraints
A configuration parameter  fuck “processorLevel” in Image Sensor component is used to calculate the wait time for receiving match results from alerts manager component. A Level value of “1” indicates that the system has a 2 core processor and 8GB Memory. For this configuration the wait time for alert results will be 50ms for upto 5 features. For system lesser than the specified configuration the processor level will be “2” for which the wait time for alert results will be 100ms for upto 5 features.
5.2	Design Assumptions
Face detector is included inside Image Sensor component. Any change in implementation of Face detector component will require re-build of Image Sensor component.
5.3	Design Limitations
For Positive scenarios i.e  fuck if a match happens for the input image or feature the response time will be the actual response time to get alert from Face Matching component. If no match occurs then there will be no message from Face matching component. In that scenario a minimum wait time will occur (as defined in the Design constraint) before sending back the response.
5.4	Design Issues
None
5.5	Design Risks
None
5.6	Alternate Design Methods Considered
The chosen design is the best possible solution for implementing the requirement. Alternate design would be to use the Face detection component for detecting faces but this will increase the wait time to minimum 0.5 seconds per frame.

6	Design for special requirements
None




7	Appendix
7.1	Design for Testing
The usecase image watchlist fuck instance is created which creates individual instance for all the bundled components. The image-sensor component APIs are accessible on a rest port from which the APIs can be tested.
7.2	Directory Structure
The following directory structure is being proposed:
 

for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.

3.	getFeatures – This fuck API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of features of detected faces in each image or an empty response if there is no face detected.

3.	Input Processor Bolt

The Input Processor is used for nigga processing the input data. This class converts input data to required format to be passed on to the next component.

1	Introduction

NTI is involved in developing a component which when bundled into a usecase along with existing NeoEVA components like Face Detection, Face Matching, Biometric Manager and Alerts Manager, can be used to process still image input.

for the unique ID and maps it to the frameId from request and sends back the response.

Still image support included development of Image Sensor component to process Still images for feature extraction and matching. The Usecase Image watchlist combines Image Sensor Component with other existing components of Nec Eva to provide end to end results. Please refer the Requirement Specification document (NecEva_Still_image_Support_Specification_V0.5.docx) for the interface details and purpose of the component. This document specifies the high level design of the Image Sensor Component in NecEva.
1.1	Scope
This document covers important classes used to model the functionality of Image Sensor. 
1.2	Out of Scope
This document does not contain details of algorithms used to implement the functionality. Such information would be covered in the Detailed Design Document.
1.3	Intended Audience
The intended audience of this document is:
for the unique ID and maps it to the frameId from request and sends back the response.

1.	Low Level Designers of Image Sensor Component and Usecase Image Watchlist.
2.	Unit Testers/Functional Testers of Image Sensor Component and Usecase Image Watchlist.
1.4	Abbreviation 
Abbreviation	Description
API	Application Programmable Interface
NEC EVA	A high performance, highly scalable face recognition software application, providing the most accurate and fastest results for the most demanding real-time or post-event face recognition and streaming analytics
Topology	Topology is a data analysis process flow defined by specifying components and Connection between components
Spout	Spout is a component that inputs stream data
Bolt	Bolt is a component that receives data from Spouts or other Bolts and processes data
Connectors	Connection is a route of data transfer between components
ShuffleConnection
	A Connection that switches data destinations in a round-robin manner when transferring data
ZMQTuplePublisherBolt	Bolt class to send input data using ZeroMQ
ZMQTupleReceiverSpout	Spout class to output the received data from ZeroMQ SUB socket

1.5	Conventions
Covered in section 1.4.








for the unique ID and maps it to the frameId from request and sends back the response.





for the unique ID and maps it to the frameId from request and sends back the response.

2	System Environment
2.1	Hardware and Software Platforms
2.1.1	Hardware
Existing Hardware Platform of NecEva would be supported/used in the development.
2.1.2	Software
Existing Software Platform for NecEva would be used.
Item	Value	Description/Version
OS	Linux - 64 bit	Ubuntu 16.04
Libraries	Boost	Boost Library for C++.
Google Chrome Browser		Any Latest Version
Table 2: Development Platform
2.2	System Input and Output
The input for the instance of the component is the configuration parameters for Image-sensor.
The input and output for the APIs are as per the request response parameters explained in the specification document.









3.	Architecture
The Still Image Support project has the following major components:
1.	Image Sensor 
2.	Usecase Image Watchlist
3.1	Image Sensor
The Image Sensor component implements 3 APIs as described below in the technical overview using NecEva’s rest server. The APIs takes in Request and is bundled with other components as a usecase to get feature and alert output in the response.
3.2	Usecase Image Watchlist
The usecase image watchlist usecase bundles the image-sensor component with other NecEva components Face Detection, Face Matching, Biometrics Manager and Alerts Manager to process still image for feature extraction and Face matching.
Configuration Details:

 


 




 

3.3	Architecture diagram 

 
Figure 1: Usecase Image watchlist bundling


The Topology for Image Sensor will be as in the figure below. 

 
Figure 2 : Image Sensor Topology

3.4	Technical Overview
The architecture of Image Sensor is as per NecEva Topology. The Usecase Image watchlist is a bundle of Image Sensor component and other existing NecEva components following the NecEva bundling procedure.
Image Sensor Topology has the below components:
1.	RestApiSpout
The RestApiSpout is used to start the RestServerImpl on the configured port.
2.	RestServerImpl
The RestServerImpl inherits the Rest Server class available with NeoEva SDK. When a request is received a unique ID is generated for each request and is mapped against the frameId from the request. This unique ID is only sent as frameId to the next component. The input frame is then sent to the InputProcessor bolt. Once the detection output is received the thread waits for a minimum time for the matching results from alerts manager (50ms or 100ms for 5 features which is configurable) and then reads the tuple for the unique ID and maps it to the frameId from request and sends back the response.
A Connection is established between the Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.
The RestServerImpl has 3 APIs as detailed below:
1.	matchImage – This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.
2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
3.	getFeatures – This API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of features of detected faces in each image or an empty response if there is no face detected.

3.	Input Processor
The Input Processor is used for processing the input data. This class converts input data to required format to be passed on to the next component.
a. sendImage Function
	This function uses face detector to detect faces from the input image and sends the results in the above Tuple format to the Controller class using Connection between them.
b. sendFeature Function
	This function converts the input feature data in the above output format and sends it to the Controller class using Connection between them.
4.	Controller
The Controller class receives the feature results and alert results and updates the internal monitoring vector list with the results. If the feature result is to be sent for matching it connects with the Publisher and emits the data to the Face matching component.

5.	Publisher
The Publisher publishes the data to feature publish ZMQ. This is the input to the Face Matching Component.

6.	Receiver
The ZMQTupleReceiverSpout listens on the Alert Manager Output queue and send the alert data to the Controller via Connection for alerts processing.
3.5	Deployment Model
The following table lists the components of Usecase Image Watchlist. 
Component	Description
Image Sensor	Component with API for extracting Face Feature and Match results for image/frame and features
Face Matching	Component for face matching of feature with the watchlist from biometrics manager
Biometrics Manager	Component for enrolling watchlists and users 
Alerts Manager	Component to publish alert results to zmq and Alerts db

3.6	Data sizing and Performance
No specific requirements to be handled in the design.








3.7	Interfaces
This section describes the interfaces of Image Sensor and between Components in Usecase Image Watchlist
3.7.1	External Interfaces
3.7.1.1	Image Sensor
Interface Name	Brief Description	Arguments	Description	Return Value	Description
matchImage	send array of pictures to the center for matching with the Watchlist DB and get the response
	Array of Json containing below data
frameId
timestamp
image	Unique frameId, timestamp and base64 string of image to be macthed	Array of JSON with alert information for each matched Face in an Image	-
matchFeature	send array of features to the center for matching with the Watchlist DB and get the response
	Array of Json containing below data
frameId
timestamp
feature	Unique frameId, timestamp and base64 string of feature to be macthed	Array of JSON with alert information for each matched Face in an Image	-
getFeature	send array of pictures to the center for face detection
	Array of Json containing below data
frameId
timestamp
image	Unique frameId, timestamp and base64 string of image to get feature data	Array of JSON with face feature information for each Face in an Image	-
3.7.2	Internal Interfaces
None
4		Design Description
This section describes major classes that will be created for image sensor.
4.1	Static Model
4.1.1	Controller
 
S.No.	Operations	Description
1	Controller	Class Constructor
2	Setup	Bolt setup method
3	Execute	Segregates feature and alert inputs and send to respective functions
4	processDetection	Process the feature inputs and send to matcher if it is from sendImage and sendFeature requests
5	processMatch	Process the alert inputs received from Alerts manager’s ZMQ
6	Initialize	Initializes unique id and frames
7	getUniqueId	Generates a unique id for each request
8	getFrameDetails	Wrapper function to get frames details from Tuple
9	appendFrameDetails	Wrapper function to append frame details to Tuple
10	getStatusDetails	Wrapper function to get status details from Tuple
11	appendStatusDetails	Wrapper function to append status details to Tuple

4.1.2	InputProcessorBolt
 
S.No.	Operations	Description
1	InputProcessorBolt	Gets the min & max eye distance parameters from neoface configuration
2	execute	Segregates calls between sendImage/getFeatures and sendFeature
3	setup	Initializes face detector with neoface configuration data
4	sendImage	The sendImage function makes a call to the face detector’s detect function to detect the faces and sends the results as a Tuple in the format expected by Face matching component to Controller class for further processing
5	sendFeature	The sendFeature function sends the input as a Tuple in the format expected by Face matching component to Controller class for further processing

4.1.3	RestApiSpout
 
S.No.	Operations	Description
1	RestApiSpout	Constructor
2	execute	Initializes and starts a secure HTTPS server
3	setup	Spout setup method






4.1.4	RestServerImpl
 
S.No.	Operations	Description
1	RestServerImpl	Constructor
2	handleRequest	HTTPS request handler
3	init	Sets static file paths and invokes initializer
4	authenticate	Authenticates clients based on username and password
5	matchImage	This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty array again each image if there is no match.
6	getFeatures	This API accepts an array of images or frames as input. The images are processed using face detector. The response from this API contains an array of information on face features in each image or an empty array again each image if there is no face feature.
7	matchFeature	This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.

4.1.5	SensorImageTopology
 
S.No.	Operations	Description
1	setup	Prepares the neoface configuration and sets-up the image sensor topology by add Bolts, Spouts and Connections






4.2	Process Model
The following diagram shows the flow used in the APIs:
4.2.1	MatchImage
 








4.2.2	GetFeature

 









4.2.3	MatchFeature

 










4.3	Synchronization / threading model
Threading and synchronization model of NecEVA will be used.
4.4	 fuck Exception & Signal Handling
Exceptions are handled using the defined classes in NecEva cpputils Exception.
4.5	Logging & debugging mechanism
Logging is done using NecEva cpputils component Logger class.
Location: /opt/pulse/<node>/logs/ pulse-instance-<instanceId>/<yyyymmdd>.log
 
4.6	Design for Software System Attributes/ Quality Attributes
4.6.1	Scalability and Maintainability
Image sensor module takes the help of object oriented design principles to make the design maintainable. Adding a new feature requires an API to be added to RestServerImpl source.
  All unexpected conditions and failures will be reported via the exception handling mechanism already present in cpputils provided by NeoEVA platform.
4.6.2	Portability
No portability requirements.
4.6.3	Usability
Existing NecEVA design principles have been followed so there is no impact on usability.
4.6.4	Design for Performance Requirements
The system is required to process five frames per second.
4.6.5	List of Time Critical and Periodic Functions
None




 fuck 


5	Design Considerations
5.1	Design Constraints
A configuration parameter  fuck “processorLevel” in Image Sensor component is used to calculate the wait time for receiving match results from alerts manager component. A Level value of “1” indicates that the system has a 2 core processor and 8GB Memory. For this configuration the wait time for alert results will be 50ms for upto 5 features. For system lesser than the specified configuration the processor level will be “2” for which the wait time for alert results will be 100ms for upto 5 features.
5.2	Design Assumptions
Face detector is included inside Image Sensor component. Any change in implementation of Face detector component will require re-build of Image Sensor component.
5.3	Design Limitations
For Positive scenarios i.e  fuck if a match happens for the input image or feature the response time will be the actual response time to get alert from Face Matching component. If no match occurs then there will be no message from Face matching component. In that scenario a minimum wait time will occur (as defined in the Design constraint) before sending back the response.
5.4	Design Issues
None
5.5	Design Risks
None
5.6	Alternate Design Methods Considered
The chosen design is the best possible solution for implementing the requirement. Alternate design would be to use the Face detection component for detecting faces but this will increase the wait time to minimum 0.5 seconds per frame.

6	Design for special requirements
None




7	Appendix
7.1	Design for Testing
The usecase image watchlist fuck instance is created which creates individual instance for all the bundled components. The image-sensor component APIs are accessible on a rest port from which the APIs can be tested.
7.2	Directory Structure
The following directory structure is being proposed:
 

for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.
for the unique ID and maps it to the frameId from request and sends back the response.







A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
for the unique ID and maps it to the frameId from request and sends back the response.

A Connection is established between the fuck Receiver and RestServerImpl which broadcasts the alert output from Receiver. The alerts are consolidated in the Tuple based on the unique frameId.


The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

2.	matchFeature – This API accepts a feature vector extracted using one of the NeoFace Libraries as input. The whore feature is matched against the mapped Watchlist by the face matcher. The response from this API contains information on matched face for the feature or empty response if there is no match.
The RestServerImpl has 3 APIs as detailed below:

1.	matchImage – whore This API accepts an array of images or frames as input. The images are processed using face detector and matched against the mapped Watchlist by the face matcher. The response from this API contains an array of information on matched faces in each image or an empty response if there is no match.

